#############################################################################
#																			#
# 					     	Installation of Serpent 						#
#																			#
#############################################################################
NOTE: 
In case you're not familiar with the linux environment or are a bit rusty, 
use the TSUBAME Intro to linux tutorial PDF found in the folder.
These instructions are to be found also in a homemade script for easy use,
found also in the same folder.
#############################################################################

Copy the necessary data from the shared server to your own linux home folder
Unzip the required files
Compile Serpent
Preparation of cross-sectional area data
Setting environment variables
Perform tutorial calculation
-----------------------------------------------------------------------------
1. Required files
#There are two versions of the data folder
	ftp://192.168.11.3/obaralab/Serpent
	192.168.11.3 | obaralab | pebcan
	
#Serpent wiki, installation and tutorial guides.
	https://serpent.vtt.fi/mediawiki/index.php/Main_Page

-----------------------------------------------------------------------------
2. Upload data to server
	mkdir serpent
#Create serpent directory in your home directory
#Upload files to serpent directory with ftp app (WinSCP)

-----------------------------------------------------------------------------
3. Unzip the required files
	cd serpent
	mkdir src
#Go to the serpent directory and create a src directory
	cp ./Serpent_2.1.32/*.gz ./src/
#Copy the program source files to the src directory
	cd src
#Unzip the source
	tar -xvzf Serpent2.tar.gz
	tar -xvzf sssup2.tar.gz
	tar -xvzf sssup2.1.32.tar.gz
	
-----------------------------------------------------------------------------
4. Compile Serpent.
#Check flags that you want to modfiy in the MakeFille (see wiki and bellow)
#For more info check the script for description of the flags
	vim makefille
#Compile with make command
	make
#After compiling, an executable file named sss2 is created in the src dir
#Create a directory to store the executable file and copy it
	cd ..
	mkdir bin
	cp ./src/sss2 ./bin/

-----------------------------------------------------------------------------
5. Preparation of cross-sectional area file
#Create a directory for storing cross-sectional area files
	mkdir xsdata
	mkdir ./xsdata/endfb7
#Copy the evaluated cross-sectional area library ENDF / B-VII
	cp ./Serpent_1.1.7/c757mnyws00/xsdata/endfb7.zip ./xsdata/endfb7/
#Copy the utility program for each directory
	cp -r ./Serpent_1.1.7/c757mnyws00/util/ ./
	
#Decompressing the cross-sectional area file
	cd ./xsdata/endfb7
	unzip endfb7.zip
#Rewrite in sss_endfb7u.xsdir (usename is your own account name)
	vim sss_endfb7u.xsdir
	datapath=/home/"username"/serpent/xsdata/endfb7/acedata
#Give execute permission to the perl script in the util directory
	cd ..
	cd util
	chmod +x xsdirconvert.pl

#Change dir back to endfb7 directory
	cd ..
#Create a cross-sectionaviml area data reference file for serpent.
#Execute the perl script xsdirconvert.pl
perl ../../util/xsdirconvert.pl sss_endfb7u.xsdir> sss_endfb7u.xsdata

-----------------------------------------------------------------------------
6. Setting environment variables (use whatever editor you please)
	vim ~/.bashrc

#Add the following (usename is your own account name)
#Add these environment variables via editor to ~/.bashrc or ~/.bash_profiles 
#NOTE: B shell needs also the "export" part, compared to other shells

########Serpent########
export SERPENT_DIR=/home/username/serpent/
export SERPENT_DATA=$SERPENT_DIR/xsdata
export SERPENT_ACELIB=sss_endfb7u.xsdata
export PATH=$SERPENT_DIR/bin:$PATH
#######################

#Reload the configuration file
	source ~/.bashrc
	source ~/.bash_profiles

#Check if environment variables are set
	echo $SERPENT_DIR
	echo $SERPENT_DATA	

#Check if the path to the executable file is created
	which sss2

#You can call the exec. file from anywhere as long as the path is created.
	sss2 -version

#Copy of cross-sectional area data ref. file in case you didn't already
#Copy sss_endfb7u.xsdata in the endfb7 directory
	cp sss_endfb7u.xsdata $SERPENT_DATA/
	cp sss_endfb7.dec $SERPENT_DATA/
    cp sss_endfb7.nfy $SERPENT_DATA/	
	
8. Perform benchmark calc. (recomended, see if you compiled the code well)
	Use the examples in the souce folder or run one of the benchmaks bellow
	http://serpent.vtt.fi/mediawiki/index.php/Validation_and_verification

7. Perform tutorial calculation
	https://serpent.vtt.fi/mediawiki/index.php/Tutorial
	
	
#############################################################################
#																			#
#     This part is to explain why and how we change flags in a make file    #
#																			#
#############################################################################

CFLAGS and CXXFLAGS are either the name of environment variables or of 
Makefile variables that can be set to specify additional switches to be 
passed to a compiler in the process of building computer software.

EXAMPLES:
CC  = GCC (or ICC) # compiler to be used
CFLAGS enables the addition of switches for the C compiler
CXXFLAGS are meant to be used when invoking a C++ compiler.
LDFLAGS Flags added when invoking the linker (C, C++, or Fortran)

#############################################################################

#_1 GNU Compiler:
CC  	 = gcc										# compiler selection flag
CFLAGS   = -Wall -ansi -ffast-math -O3 -Wunused		# optimization flag
# See more here: https://wiki.gentoo.org/wiki/GCC_optimization/en
LDFLAGS  = -lm										# linking flag

#_1.1 Parallel calculation using Open MP 
# This one is for linux based OS, GNU (gcc, g++, gfortran)):
# Enables parallelizer to gen. multi-threaded code based on OpenMP directives
CFLAGS  += -DOPEN_MP 								# user flag, if def
CFLAGS  += -fopenmp 								# 
LDFLAGS += -fopenmp									# linking flag

#_1.2 Alternative (does the same thing as the CF and LD flag above, 
	but it works on the TSUBAME because the diferent arhitechture)
CFLAGS  += -qopenmp
LDFLAGS += -qopenmp

#############################################################################

#_2 Intel Compiler:
CC  	 = icc

#_2.2 Optimization for Intel CPU's:
CFLAGS   = -Wall -ansi -pedantic -xHost -ipo -DINTELCC
#_2.2 Alternative:
CFLAGS   = -Wall -ansi -pedantic -O3 -DINTELCC 		#03 level of optimization
LDFLAGS  = -lm

#_2.3 Parallel calculation using Open MP (this one is for Intel (icc ifort)):
CFLAGS  += -DOPEN_MP
CFLAGS  += -openmp
LDFLAGS += -openmp

#############################################################################
#_3 Enable Parallel process calculation using MPI:
CC  	 = mpicc		  # mpicc is compiler wrapper
CFLAGS  += -DMPI	 	  # enables certain lines of the code to be compiled

#############################################################################
Chose just one compiler to compile the code, gcc, icc, mpicc.
Uncomment the CFLAGS under the CC compile flag,
Leave at least one "LDFLAGS  = -lm" uncommented for the code to link de 
correct libraries while compiling.
To enable OMP parralel threading use the apropiate flags under the chosen 
compiler (NOTE: the mpicc uses the OMP flags unde the icc compiler)