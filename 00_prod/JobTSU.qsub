#!/bin/csh
#$-cwd				## Work in current directory
#$ -V 				## Use environment variables
#$ -N TSU_prod		## Name of the run
#$ -o job.out		## Print job output to job.out
#$ -e job.out 		## Print job errors to job.out
#$ -l f_node=4		## Resource type F: qty 4 
#$ -l h_rt=24:00:00	## Reserve the run for x hours
#$ -p -5 			## Priority: -5(standard), -4(mid) and -3 (top)

## 28 threads per node (export for sh, setenv for csh)
## seems not to be needed because serpent can handle it
## setenv OMP_NUM_THREADS=28

## Module loading 
. /etc/profile.d/modules.sh
module load gcc
module load cuda
module load intel
module load openmpi
module load python/3.6.5

set NNODEs=4			# Number of Nodes for OMPI
set NCPUs=28			# Number of CPUs for Serpent OMP
echo Serpent 2 has started: >> calc_time.out
set RunStart=`date` && set RS=`date -d "$RunStart" +%s`
#===============================================================================================
set WKDR = $PWD			# set working dir
set sINP = wh_lfr		# main serpent input file	
set noBUsteps = 1		# last burnup step output file
set step = 0			# first suffle step
set stepx = 96			# last suffle step
#===============================================================================================

# - Backup, just in case
if (! -e original_files}) then
	mkdir original_files
    cp * original_files
endif

# - Start run and shuffle fuel.inp
while ( $step <= $stepx ) 
	@ var = $step
    set CyStart=`date` && set CS=`date -d "$CyStart" +%s`

# - Run Serpent
    (cd ${WKDR}; mpirun -np 1 -n ${NNODEs} -x LD_LIBRARY_PATH \
	sss2 -omp ${NCPUs} ${sINP} >> sss2.out ) & wait
	
# - Note the time for the burnup
	set CyEnd=`date` && set CE=`date -d "$CyEnd" +%s` && set DCy=`expr \( $CE - $CS \)`
	printf "S2 run in: %sh:%02dmin:%02ds\n" `expr $DCy / 3600` `expr $DCy / 60 % 60` \
	`expr $DCy % 60` >> calc_time.out 	

# - Make burnup cycle folder and copy all 
    if (! -e ${sINP}suffleNo${var}) then
		mkdir ${sINP}suffleNo${var}
	endif

# - Copy new fuel data and to fuel.inp and shuffle
	(cd ${WKDR}; cp fuel.inp ${sINP}suffleNo${var} ) & wait
	(cd ${WKDR}; cp ${sINP}.bumat${noBUsteps} fuel.inp ) & wait
	(cd ${WKDR}; python Shuffling.py ) & wait
	
# - Move the rest	
	(cd ${WKDR}; mv ${sINP}.* ${sINP}suffleNo${var} ) & wait
	(cd ${WKDR}; mv ${sINP}_* ${sINP}suffleNo${var} ) & wait
    (cd ${WKDR}; mv sss2.out ${sINP}suffleNo${var} ) & wait
    
# - Note the time for each cycle to file
	set CyEnd=`date` && set CE=`date -d "$CyEnd" +%s` && set DCy=`expr \( $CE - $CS \)`
	printf "Cycle ${var} (+.py script) in: %sh:%02dmin:%02ds\n" `expr $DCy / 3600` \
	`expr $DCy / 60 % 60` `expr $DCy % 60` >> calc_time.out 
	
	@ step++
end
#===============================================================================================
# - Note the end time of the run
set set RunEND=`date` && set RE=`date -d "$RunEND" +%s` && set DRun=`expr \( $RE - $RS \)`
printf "Run done in %sh:%02dmin:%02ds\n" `expr $DRun / 3600 ` `expr $DRun / 60 % 60` \
`expr $DRun % 60` >> calc_time.out 
#===============================================================================================
# NOTE: The script has been made for csh shell, be aware ^-^

